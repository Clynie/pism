"""Utility functions used by PISM's regression tests"""

import PISM
import numpy as np

def shallow_grid(Mx=3, My=5, Lx=10e3, Ly=20e3):
    "Create a shallow computational grid for testing"
    return PISM.IceGrid_Shallow(PISM.Context().ctx,
                                Lx, Ly, 0, 0, Mx, My,
                                PISM.CELL_CORNER,
                                PISM.NOT_PERIODIC)

def sample(vec, i=0, j=0):
    "Sample a PISM array"
    with PISM.vec.Access(nocomm=vec):
        return vec[i, j]

def check(vec, value):
    "Check if values of vec are almost equal to value."
    np.testing.assert_almost_equal(sample(vec), value)

def check_difference(A, B, value):
    "Check if the difference between A and B is almost equal to value."
    np.testing.assert_almost_equal(sample(A) - sample(B), value)

def check_ratio(A, B, value):
    "Check if the ratio of A and B is almost equal to value."
    b = sample(B)
    if b != 0:
        np.testing.assert_almost_equal(sample(A) / b, value)
    else:
        np.testing.assert_almost_equal(sample(A), 0.0)

def create_scalar_forcing(file_name, variable_name, units, values, times, time_bounds=None):
    "Create a dummy scalar forcing file (delta_T, etc)."

    ctx = PISM.Context()

    time_name = ctx.config.get_string("time.dimension_name")
    forcing = PISM.Timeseries(ctx.com, ctx.unit_system, variable_name,
                              time_name)
    forcing.variable().set_string("units", units)

    if time_bounds is not None:
        for k in range(len(values)):
            # NB: ignores times
            bounds = np.array(time_bounds, dtype=np.float64)
            forcing.append(values[k], bounds[2*k], bounds[2*k + 1])
        forcing.set_use_bounds(True)
    else:
        forcing.set_use_bounds(False)
        for k in range(len(values)):
            # NB: we are not using bounds, so it is OK to use times[k] for both endpoints
            t = np.array(times, dtype=np.float64)
            forcing.append(values[k], times[k], times[k])

    output = PISM.util.prepare_output(file_name, append_time=False)
    if time_bounds is not None:
        output.put_att_text(time_name, "bounds", time_name + "_bounds")
    forcing.write(output)
